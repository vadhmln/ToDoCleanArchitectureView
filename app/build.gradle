plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.hilt.android)
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
}

android {
    namespace 'ru.vdh.todo'
    compileSdk libs.versions.compileSdk.get().toInteger()

    defaultConfig {
        applicationId "ru.vdh.todo"
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}

dependencies {
    implementation project(':core:ui')
    implementation project(':core:presentation')
    implementation project(':core:domain')
    implementation project(':core:data')
    implementation project(':core:datasource')

    implementation project(':feature:todolist:ui')
    implementation project(':feature:todolist:presentation')
    implementation project(':feature:todolist:domain')
    implementation project(':feature:todolist:data')
    implementation project(':feature:todolist:datasource')

    implementation project(':feature:addtodo:ui')
    implementation project(':feature:addtodo:presentation')
    implementation project(':feature:addtodo:domain')
    implementation project(':feature:addtodo:data')
    implementation project(':feature:addtodo:datasource')

    implementation project(':feature:updatetodo:ui')
    implementation project(':feature:updatetodo:presentation')
    implementation project(':feature:updatetodo:domain')
    implementation project(':feature:updatetodo:data')
    implementation project(':feature:updatetodo:datasource')

    implementation project(':core:database-local')

    implementation(libs.bundles.android.core)
    implementation(libs.bundles.fragment)
    implementation(libs.kotlinx.coroutines.android)
    implementation libs.kotlin.stdlib
    implementation libs.bundles.lifecycle

    //Hilt
    implementation(libs.hilt.android)
    kapt(libs.hilt.compiler)

    //Room
    implementation(libs.room.runtime)
    kapt(libs.room.compiler)
    implementation(libs.room.ktx)
//    implementation libs.hilt.lifecycle.viewmodel
    androidTestImplementation(libs.room.testing)

    //RecycleView animator
    implementation 'jp.wasabeef:recyclerview-animators:4.0.2'

    implementation libs.androidx.junit.ktx

}

tasks.whenTaskAdded { task ->
    if (task.name.contains('generateSafeArgs')) {
        println("Added dependency to task " + task.name)
        task.doLast {
            fileTree(appNavigation)
                    .filter { it.isFile() && it.name.contains("Directions") }
                    .forEach { file ->
                        println("Changing ${file.name} navigation file")
                        if (file.exists()) {
                            def lines = file.readLines()
                            lines = lines.plus(2, "import ru.vdh.todo.core.ui.R")
                            file.text = lines.join("\n")
                        }
                    }
            move(file("$appNavigation"), file("$navigationPath"))
        }
    }
}

private def move(File sourceFile, File destFile) {
    if (sourceFile.isDirectory()) {
        File[] files = sourceFile.listFiles()
        assert files != null
        for (File file : files) move(file, new File(destFile, file.getName()))
        if (!sourceFile.delete()) throw new RuntimeException()
    } else {
        if (!destFile.getParentFile().exists())
            if (!destFile.getParentFile().mkdirs()) throw new RuntimeException()
        if (!sourceFile.renameTo(destFile)) throw new RuntimeException()
    }
}

